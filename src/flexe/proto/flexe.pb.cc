// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flexe.proto

#include "flexe.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flexe {
constexpr GenericRequest::GenericRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenericRequestDefaultTypeInternal {
  constexpr GenericRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericRequestDefaultTypeInternal() {}
  union {
    GenericRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericRequestDefaultTypeInternal _GenericRequest_default_instance_;
constexpr GenericResponse::GenericResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reply_(0){}
struct GenericResponseDefaultTypeInternal {
  constexpr GenericResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericResponseDefaultTypeInternal() {}
  union {
    GenericResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericResponseDefaultTypeInternal _GenericResponse_default_instance_;
constexpr TTRequest::TTRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idvehicle_(0)
  , trainflag_(false)
  , epochs_(0)
  , batch_size_(0){}
struct TTRequestDefaultTypeInternal {
  constexpr TTRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TTRequestDefaultTypeInternal() {}
  union {
    TTRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TTRequestDefaultTypeInternal _TTRequest_default_instance_;
constexpr EvaluateReply::EvaluateReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loss_(0)
  , accuracy_(0){}
struct EvaluateReplyDefaultTypeInternal {
  constexpr EvaluateReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvaluateReplyDefaultTypeInternal() {}
  union {
    EvaluateReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvaluateReplyDefaultTypeInternal _EvaluateReply_default_instance_;
constexpr ModelReply::ModelReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tensors_()
  , idvehicle_(0)
  , num_examples_(0){}
struct ModelReplyDefaultTypeInternal {
  constexpr ModelReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelReplyDefaultTypeInternal() {}
  union {
    ModelReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelReplyDefaultTypeInternal _ModelReply_default_instance_;
constexpr ModelRequest::ModelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tensors_()
  , idvehicle_(0)
  , number_of_vehicles_(0)
  , num_examples_(0){}
struct ModelRequestDefaultTypeInternal {
  constexpr ModelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelRequestDefaultTypeInternal() {}
  union {
    ModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelRequestDefaultTypeInternal _ModelRequest_default_instance_;
}  // namespace flexe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flexe_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flexe_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flexe_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flexe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flexe::GenericRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flexe::GenericRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flexe::GenericResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flexe::GenericResponse, reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flexe::TTRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flexe::TTRequest, idvehicle_),
  PROTOBUF_FIELD_OFFSET(::flexe::TTRequest, trainflag_),
  PROTOBUF_FIELD_OFFSET(::flexe::TTRequest, modelname_),
  PROTOBUF_FIELD_OFFSET(::flexe::TTRequest, epochs_),
  PROTOBUF_FIELD_OFFSET(::flexe::TTRequest, batch_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flexe::EvaluateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flexe::EvaluateReply, loss_),
  PROTOBUF_FIELD_OFFSET(::flexe::EvaluateReply, accuracy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flexe::ModelReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flexe::ModelReply, idvehicle_),
  PROTOBUF_FIELD_OFFSET(::flexe::ModelReply, tensors_),
  PROTOBUF_FIELD_OFFSET(::flexe::ModelReply, num_examples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flexe::ModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flexe::ModelRequest, idvehicle_),
  PROTOBUF_FIELD_OFFSET(::flexe::ModelRequest, tensors_),
  PROTOBUF_FIELD_OFFSET(::flexe::ModelRequest, number_of_vehicles_),
  PROTOBUF_FIELD_OFFSET(::flexe::ModelRequest, num_examples_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flexe::GenericRequest)},
  { 6, -1, sizeof(::flexe::GenericResponse)},
  { 12, -1, sizeof(::flexe::TTRequest)},
  { 22, -1, sizeof(::flexe::EvaluateReply)},
  { 29, -1, sizeof(::flexe::ModelReply)},
  { 37, -1, sizeof(::flexe::ModelRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flexe::_GenericRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flexe::_GenericResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flexe::_TTRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flexe::_EvaluateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flexe::_ModelReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flexe::_ModelRequest_default_instance_),
};

const char descriptor_table_protodef_flexe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013flexe.proto\022\005flexe\"\035\n\016GenericRequest\022\013"
  "\n\003msg\030\001 \001(\t\" \n\017GenericResponse\022\r\n\005reply\030"
  "\001 \001(\005\"h\n\tTTRequest\022\021\n\tidVehicle\030\001 \001(\005\022\021\n"
  "\ttrainFlag\030\002 \001(\010\022\021\n\tmodelName\030\003 \001(\t\022\016\n\006e"
  "pochs\030\004 \001(\005\022\022\n\nbatch_size\030\005 \001(\005\"/\n\rEvalu"
  "ateReply\022\014\n\004loss\030\001 \001(\001\022\020\n\010accuracy\030\002 \001(\001"
  "\"F\n\nModelReply\022\021\n\tidVehicle\030\001 \001(\005\022\017\n\007ten"
  "sors\030\002 \003(\014\022\024\n\014num_examples\030\003 \001(\005\"d\n\014Mode"
  "lRequest\022\021\n\tidVehicle\030\001 \001(\005\022\017\n\007tensors\030\002"
  " \003(\014\022\032\n\022number_of_vehicles\030\003 \001(\005\022\024\n\014num_"
  "examples\030\004 \001(\0052\327\004\n\005Flexe\022,\n\003fit\022\020.flexe."
  "TTRequest\032\021.flexe.ModelReply\"\000\0224\n\010evalua"
  "te\022\020.flexe.TTRequest\032\024.flexe.EvaluateRep"
  "ly\"\000\022:\n\014update_model\022\020.flexe.TTRequest\032\026"
  ".flexe.GenericResponse\"\000\022>\n\022aggregate_ev"
  "aluate\022\020.flexe.TTRequest\032\024.flexe.Evaluat"
  "eReply\"\000\0229\n\raggregate_fit\022\023.flexe.ModelR"
  "equest\032\021.flexe.ModelReply\"\000\022@\n\022aggregate"
  "_sync_fit\022\025.flexe.GenericRequest\032\021.flexe"
  ".ModelReply\"\000\022;\n\017server_evaluate\022\020.flexe"
  ".TTRequest\032\024.flexe.EvaluateReply\"\000\022<\n\013st"
  "ore_model\022\023.flexe.ModelRequest\032\026.flexe.G"
  "enericResponse\"\000\022>\n\025initialize_parameter"
  "s\022\020.flexe.TTRequest\032\021.flexe.ModelReply\"\000"
  "\0226\n\003end\022\025.flexe.GenericRequest\032\026.flexe.G"
  "enericResponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flexe_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flexe_2eproto = {
  false, false, 1024, descriptor_table_protodef_flexe_2eproto, "flexe.proto", 
  &descriptor_table_flexe_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_flexe_2eproto::offsets,
  file_level_metadata_flexe_2eproto, file_level_enum_descriptors_flexe_2eproto, file_level_service_descriptors_flexe_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flexe_2eproto_getter() {
  return &descriptor_table_flexe_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flexe_2eproto(&descriptor_table_flexe_2eproto);
namespace flexe {

// ===================================================================

class GenericRequest::_Internal {
 public:
};

GenericRequest::GenericRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flexe.GenericRequest)
}
GenericRequest::GenericRequest(const GenericRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flexe.GenericRequest)
}

void GenericRequest::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenericRequest::~GenericRequest() {
  // @@protoc_insertion_point(destructor:flexe.GenericRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericRequest::ArenaDtor(void* object) {
  GenericRequest* _this = reinterpret_cast< GenericRequest* >(object);
  (void)_this;
}
void GenericRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flexe.GenericRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flexe.GenericRequest.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flexe.GenericRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flexe.GenericRequest.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexe.GenericRequest)
  return target;
}

size_t GenericRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexe.GenericRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexe.GenericRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexe.GenericRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexe.GenericRequest)
    MergeFrom(*source);
  }
}

void GenericRequest::MergeFrom(const GenericRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexe.GenericRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
}

void GenericRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexe.GenericRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericRequest::CopyFrom(const GenericRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexe.GenericRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericRequest::IsInitialized() const {
  return true;
}

void GenericRequest::InternalSwap(GenericRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flexe_2eproto_getter, &descriptor_table_flexe_2eproto_once,
      file_level_metadata_flexe_2eproto[0]);
}

// ===================================================================

class GenericResponse::_Internal {
 public:
};

GenericResponse::GenericResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flexe.GenericResponse)
}
GenericResponse::GenericResponse(const GenericResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_ = from.reply_;
  // @@protoc_insertion_point(copy_constructor:flexe.GenericResponse)
}

void GenericResponse::SharedCtor() {
reply_ = 0;
}

GenericResponse::~GenericResponse() {
  // @@protoc_insertion_point(destructor:flexe.GenericResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GenericResponse::ArenaDtor(void* object) {
  GenericResponse* _this = reinterpret_cast< GenericResponse* >(object);
  (void)_this;
}
void GenericResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flexe.GenericResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flexe.GenericResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reply = 1;
  if (this->reply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexe.GenericResponse)
  return target;
}

size_t GenericResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexe.GenericResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reply = 1;
  if (this->reply() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reply());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexe.GenericResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexe.GenericResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexe.GenericResponse)
    MergeFrom(*source);
  }
}

void GenericResponse::MergeFrom(const GenericResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexe.GenericResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reply() != 0) {
    _internal_set_reply(from._internal_reply());
  }
}

void GenericResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexe.GenericResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericResponse::CopyFrom(const GenericResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexe.GenericResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericResponse::IsInitialized() const {
  return true;
}

void GenericResponse::InternalSwap(GenericResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(reply_, other->reply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flexe_2eproto_getter, &descriptor_table_flexe_2eproto_once,
      file_level_metadata_flexe_2eproto[1]);
}

// ===================================================================

class TTRequest::_Internal {
 public:
};

TTRequest::TTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flexe.TTRequest)
}
TTRequest::TTRequest(const TTRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&idvehicle_, &from.idvehicle_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&idvehicle_)) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:flexe.TTRequest)
}

void TTRequest::SharedCtor() {
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&idvehicle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&idvehicle_)) + sizeof(batch_size_));
}

TTRequest::~TTRequest() {
  // @@protoc_insertion_point(destructor:flexe.TTRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TTRequest::ArenaDtor(void* object) {
  TTRequest* _this = reinterpret_cast< TTRequest* >(object);
  (void)_this;
}
void TTRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TTRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TTRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flexe.TTRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modelname_.ClearToEmpty();
  ::memset(&idvehicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&idvehicle_)) + sizeof(batch_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TTRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 idVehicle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idvehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trainFlag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          trainflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flexe.TTRequest.modelName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 epochs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          epochs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batch_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TTRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flexe.TTRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idVehicle = 1;
  if (this->idvehicle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idvehicle(), target);
  }

  // bool trainFlag = 2;
  if (this->trainflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_trainflag(), target);
  }

  // string modelName = 3;
  if (!this->modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flexe.TTRequest.modelName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_modelname(), target);
  }

  // int32 epochs = 4;
  if (this->epochs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_epochs(), target);
  }

  // int32 batch_size = 5;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexe.TTRequest)
  return target;
}

size_t TTRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexe.TTRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modelName = 3;
  if (!this->modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // int32 idVehicle = 1;
  if (this->idvehicle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idvehicle());
  }

  // bool trainFlag = 2;
  if (this->trainflag() != 0) {
    total_size += 1 + 1;
  }

  // int32 epochs = 4;
  if (this->epochs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epochs());
  }

  // int32 batch_size = 5;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TTRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexe.TTRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TTRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexe.TTRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexe.TTRequest)
    MergeFrom(*source);
  }
}

void TTRequest::MergeFrom(const TTRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexe.TTRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (from.idvehicle() != 0) {
    _internal_set_idvehicle(from._internal_idvehicle());
  }
  if (from.trainflag() != 0) {
    _internal_set_trainflag(from._internal_trainflag());
  }
  if (from.epochs() != 0) {
    _internal_set_epochs(from._internal_epochs());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void TTRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexe.TTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTRequest::CopyFrom(const TTRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexe.TTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTRequest::IsInitialized() const {
  return true;
}

void TTRequest::InternalSwap(TTRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, GetArenaForAllocation(),
      &other->modelname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TTRequest, batch_size_)
      + sizeof(TTRequest::batch_size_)
      - PROTOBUF_FIELD_OFFSET(TTRequest, idvehicle_)>(
          reinterpret_cast<char*>(&idvehicle_),
          reinterpret_cast<char*>(&other->idvehicle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TTRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flexe_2eproto_getter, &descriptor_table_flexe_2eproto_once,
      file_level_metadata_flexe_2eproto[2]);
}

// ===================================================================

class EvaluateReply::_Internal {
 public:
};

EvaluateReply::EvaluateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flexe.EvaluateReply)
}
EvaluateReply::EvaluateReply(const EvaluateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&loss_, &from.loss_,
    static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&loss_)) + sizeof(accuracy_));
  // @@protoc_insertion_point(copy_constructor:flexe.EvaluateReply)
}

void EvaluateReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&loss_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&loss_)) + sizeof(accuracy_));
}

EvaluateReply::~EvaluateReply() {
  // @@protoc_insertion_point(destructor:flexe.EvaluateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvaluateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EvaluateReply::ArenaDtor(void* object) {
  EvaluateReply* _this = reinterpret_cast< EvaluateReply* >(object);
  (void)_this;
}
void EvaluateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvaluateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvaluateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:flexe.EvaluateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&loss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&loss_)) + sizeof(accuracy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvaluateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double loss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accuracy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvaluateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flexe.EvaluateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double loss = 1;
  if (!(this->loss() <= 0 && this->loss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_loss(), target);
  }

  // double accuracy = 2;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_accuracy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexe.EvaluateReply)
  return target;
}

size_t EvaluateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexe.EvaluateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double loss = 1;
  if (!(this->loss() <= 0 && this->loss() >= 0)) {
    total_size += 1 + 8;
  }

  // double accuracy = 2;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvaluateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexe.EvaluateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EvaluateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvaluateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexe.EvaluateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexe.EvaluateReply)
    MergeFrom(*source);
  }
}

void EvaluateReply::MergeFrom(const EvaluateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexe.EvaluateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.loss() <= 0 && from.loss() >= 0)) {
    _internal_set_loss(from._internal_loss());
  }
  if (!(from.accuracy() <= 0 && from.accuracy() >= 0)) {
    _internal_set_accuracy(from._internal_accuracy());
  }
}

void EvaluateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexe.EvaluateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluateReply::CopyFrom(const EvaluateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexe.EvaluateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluateReply::IsInitialized() const {
  return true;
}

void EvaluateReply::InternalSwap(EvaluateReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvaluateReply, accuracy_)
      + sizeof(EvaluateReply::accuracy_)
      - PROTOBUF_FIELD_OFFSET(EvaluateReply, loss_)>(
          reinterpret_cast<char*>(&loss_),
          reinterpret_cast<char*>(&other->loss_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvaluateReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flexe_2eproto_getter, &descriptor_table_flexe_2eproto_once,
      file_level_metadata_flexe_2eproto[3]);
}

// ===================================================================

class ModelReply::_Internal {
 public:
};

ModelReply::ModelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flexe.ModelReply)
}
ModelReply::ModelReply(const ModelReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensors_(from.tensors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&idvehicle_, &from.idvehicle_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_examples_) -
    reinterpret_cast<char*>(&idvehicle_)) + sizeof(num_examples_));
  // @@protoc_insertion_point(copy_constructor:flexe.ModelReply)
}

void ModelReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&idvehicle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_examples_) -
    reinterpret_cast<char*>(&idvehicle_)) + sizeof(num_examples_));
}

ModelReply::~ModelReply() {
  // @@protoc_insertion_point(destructor:flexe.ModelReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelReply::ArenaDtor(void* object) {
  ModelReply* _this = reinterpret_cast< ModelReply* >(object);
  (void)_this;
}
void ModelReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelReply::Clear() {
// @@protoc_insertion_point(message_clear_start:flexe.ModelReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensors_.Clear();
  ::memset(&idvehicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_examples_) -
      reinterpret_cast<char*>(&idvehicle_)) + sizeof(num_examples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 idVehicle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idvehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes tensors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tensors();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 num_examples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flexe.ModelReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idVehicle = 1;
  if (this->idvehicle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idvehicle(), target);
  }

  // repeated bytes tensors = 2;
  for (int i = 0, n = this->_internal_tensors_size(); i < n; i++) {
    const auto& s = this->_internal_tensors(i);
    target = stream->WriteBytes(2, s, target);
  }

  // int32 num_examples = 3;
  if (this->num_examples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_examples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexe.ModelReply)
  return target;
}

size_t ModelReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexe.ModelReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes tensors = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tensors_.size());
  for (int i = 0, n = tensors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      tensors_.Get(i));
  }

  // int32 idVehicle = 1;
  if (this->idvehicle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idvehicle());
  }

  // int32 num_examples = 3;
  if (this->num_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_examples());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexe.ModelReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexe.ModelReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexe.ModelReply)
    MergeFrom(*source);
  }
}

void ModelReply::MergeFrom(const ModelReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexe.ModelReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensors_.MergeFrom(from.tensors_);
  if (from.idvehicle() != 0) {
    _internal_set_idvehicle(from._internal_idvehicle());
  }
  if (from.num_examples() != 0) {
    _internal_set_num_examples(from._internal_num_examples());
  }
}

void ModelReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexe.ModelReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelReply::CopyFrom(const ModelReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexe.ModelReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelReply::IsInitialized() const {
  return true;
}

void ModelReply::InternalSwap(ModelReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tensors_.InternalSwap(&other->tensors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelReply, num_examples_)
      + sizeof(ModelReply::num_examples_)
      - PROTOBUF_FIELD_OFFSET(ModelReply, idvehicle_)>(
          reinterpret_cast<char*>(&idvehicle_),
          reinterpret_cast<char*>(&other->idvehicle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flexe_2eproto_getter, &descriptor_table_flexe_2eproto_once,
      file_level_metadata_flexe_2eproto[4]);
}

// ===================================================================

class ModelRequest::_Internal {
 public:
};

ModelRequest::ModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flexe.ModelRequest)
}
ModelRequest::ModelRequest(const ModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensors_(from.tensors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&idvehicle_, &from.idvehicle_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_examples_) -
    reinterpret_cast<char*>(&idvehicle_)) + sizeof(num_examples_));
  // @@protoc_insertion_point(copy_constructor:flexe.ModelRequest)
}

void ModelRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&idvehicle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_examples_) -
    reinterpret_cast<char*>(&idvehicle_)) + sizeof(num_examples_));
}

ModelRequest::~ModelRequest() {
  // @@protoc_insertion_point(destructor:flexe.ModelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelRequest::ArenaDtor(void* object) {
  ModelRequest* _this = reinterpret_cast< ModelRequest* >(object);
  (void)_this;
}
void ModelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flexe.ModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensors_.Clear();
  ::memset(&idvehicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_examples_) -
      reinterpret_cast<char*>(&idvehicle_)) + sizeof(num_examples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 idVehicle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idvehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes tensors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tensors();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 number_of_vehicles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_of_vehicles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_examples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flexe.ModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idVehicle = 1;
  if (this->idvehicle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idvehicle(), target);
  }

  // repeated bytes tensors = 2;
  for (int i = 0, n = this->_internal_tensors_size(); i < n; i++) {
    const auto& s = this->_internal_tensors(i);
    target = stream->WriteBytes(2, s, target);
  }

  // int32 number_of_vehicles = 3;
  if (this->number_of_vehicles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_number_of_vehicles(), target);
  }

  // int32 num_examples = 4;
  if (this->num_examples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_examples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexe.ModelRequest)
  return target;
}

size_t ModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexe.ModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes tensors = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tensors_.size());
  for (int i = 0, n = tensors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      tensors_.Get(i));
  }

  // int32 idVehicle = 1;
  if (this->idvehicle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idvehicle());
  }

  // int32 number_of_vehicles = 3;
  if (this->number_of_vehicles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_vehicles());
  }

  // int32 num_examples = 4;
  if (this->num_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_examples());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexe.ModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexe.ModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexe.ModelRequest)
    MergeFrom(*source);
  }
}

void ModelRequest::MergeFrom(const ModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexe.ModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensors_.MergeFrom(from.tensors_);
  if (from.idvehicle() != 0) {
    _internal_set_idvehicle(from._internal_idvehicle());
  }
  if (from.number_of_vehicles() != 0) {
    _internal_set_number_of_vehicles(from._internal_number_of_vehicles());
  }
  if (from.num_examples() != 0) {
    _internal_set_num_examples(from._internal_num_examples());
  }
}

void ModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexe.ModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRequest::CopyFrom(const ModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexe.ModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRequest::IsInitialized() const {
  return true;
}

void ModelRequest::InternalSwap(ModelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tensors_.InternalSwap(&other->tensors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelRequest, num_examples_)
      + sizeof(ModelRequest::num_examples_)
      - PROTOBUF_FIELD_OFFSET(ModelRequest, idvehicle_)>(
          reinterpret_cast<char*>(&idvehicle_),
          reinterpret_cast<char*>(&other->idvehicle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flexe_2eproto_getter, &descriptor_table_flexe_2eproto_once,
      file_level_metadata_flexe_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace flexe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flexe::GenericRequest* Arena::CreateMaybeMessage< ::flexe::GenericRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flexe::GenericRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flexe::GenericResponse* Arena::CreateMaybeMessage< ::flexe::GenericResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flexe::GenericResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flexe::TTRequest* Arena::CreateMaybeMessage< ::flexe::TTRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flexe::TTRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flexe::EvaluateReply* Arena::CreateMaybeMessage< ::flexe::EvaluateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flexe::EvaluateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::flexe::ModelReply* Arena::CreateMaybeMessage< ::flexe::ModelReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flexe::ModelReply >(arena);
}
template<> PROTOBUF_NOINLINE ::flexe::ModelRequest* Arena::CreateMaybeMessage< ::flexe::ModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flexe::ModelRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
